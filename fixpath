#!/usr/bin/env perl
#
# fixpath - fix pathnames by replacing bad chars with %xx sequences
#
# Copyright (c) 2001-2002,2004,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# requirements
#
use strict;
use bytes;
use File::Find;
use vars qw($opt_h $opt_v $opt_V $opt_n $opt_N $opt_s $opt_i);
use Getopt::Long qw(:config no_ignore_case);
use File::Basename;

# version
#
my $VERSION = "1.7.1 2025-04-05";

# my vars
#
my $NAME = basename($0);

# usage and help
#
my $usage = "$NAME [-h] [-v lvl] [-V] file ...";
my $help = qq{$usage

    -h          print help and exit
    -v lvl      verbose / debug level
    -V          print version and exit

    -n          go thru the actions, but do not update any files (def: do the action)
    -N          do not process anything, just parse arguments (def: process something)

    -s          strict POSIX chars only
    -i          ignore \%'s if followed by 2 hex chars

    file ...    file paths to fix

$NAME version: $VERSION};
my %optctl = (
    "h" => \$opt_h,
    "v=i" => \$opt_v,
    "V" => \$opt_V,
    "n" => \$opt_n,
    "N" => \$opt_N,
    "s" => \$opt_s,
    "i" => \$opt_i,
);


# function prototypes
#
sub error($@);



# setup
#
MAIN: {

    # setup
    #
    select(STDOUT);
    $| = 1;

    # set the defaults
    #
    $opt_h = 0;
    $opt_v = 0;
    $opt_V = 0;

    # parse args
    #
    if (!GetOptions(%optctl)) {
	print STDERR "$0: invalid command line\nusage: $help";
	exit(2);
    }
    if ($opt_h) {
        print "$help\n";
        exit(0);
    }
    if ($opt_V) {
        print "$VERSION\n";
        exit(0);
    }
    if (! defined $ARGV[0]) {
	print STDERR "$0: requites at least 1 arg\nusage: $help";
	exit(3);
    }

    # process lines
    #
    if (! defined $opt_N) {
	finddepth(\&fixfile, @ARGV);
    }
}


# fixfile - fix a file or directory processed by finddepth
#
sub fixfile
{
    my $path = $_;	# current filename
    my $newpath;	# new nul terminated path
    my @pset;		# $path split into individual chars
    my $i;

    # split the path into single chars
    #
    @pset = split(//, $path);

    # process each char
    #
    for ($i=0; $i <= $#pset; ++$i) {

	# ignore %'s if -i
	#
	if (defined $opt_i && $pset[$i] =~ /%/) {
	    if ($pset[$i+1] =~ /[0-9a-fA-F]/ && $pset[$i+2] =~ /[0-9a-fA-F]/) {
	        next;
	    }
	}

	# only safe/portable chars remain unescaped
	#
	if (defined $opt_s) {
	    # only POSIX portable chars
	    if ($pset[$i] !~ m|[0-9A-Za-z.,_/-]|) {
		$pset[$i] = sprintf("%%%02x", ord($pset[$i]));
	    }
	} elsif ($i == 0) {
	    # less strict, but avoid problem first file chars
	    if ($pset[$i] !~ m|[0-9A-Za-z.,_/@^!:]|) {
		$pset[$i] = sprintf("%%%02x", ord($pset[$i]));
	    }
	} else {
	    # less strict on remaining file chars
	    if ($pset[$i] !~ m|[0-9A-Za-z.,_/@^!+:~!=-]|) {
		$pset[$i] = sprintf("%%%02x", ord($pset[$i]));
	    }
	}
    }

    # recombine processed chars into the new path
    #
    $newpath = join('', @pset);

    # rename file
    #
    if ($newpath ne $path) {
	if ($opt_v > 0) {
	    my $dir = "$File::Find::dir";
	    print "mv -f $dir/$path\t$dir/$newpath\n"
	}
	if (! defined $opt_n) {
	    rename $path, $newpath or die "cannot rename $path $newpath: $!";
	}
    }
}
